//=============================================================================
//    
//    {   
//    }   
//-----------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////////
{}()':
		    {
		    }
		    })
		   {
		   }
			})
				{
				}
					
					{
					}
						
						{
						}
							
							{
							}
-+ #0
0123456789abcdef
0123456789ABCDEF
&#039;
,%03d
0[A\]
0[A\A]A^]
|$0L)
|$0?wchar_t
%.14g
<19{ |>
 2008, Valve Corporation, All rights reserved. ========
;*3$"
?333333
3[A\]
 [%.3f server clamped to %.3f]
3RT]float
4$A\]
4fff>fff>fff>fff>
4<Pu%
%-80s
%-80s - %.80s
8[A\A]]
8[A\A]A^A_]
8_client.so
`[A\]
 [A\]
?[A\]
@ A\]
@[A\]
$[A\]
'_? A1> A1> A1> A1>
([A\A]]
[]A\A]
[A\A]]
A\A]]
`[A\A]A^]
 [A\A]A^]
[]A\A]A^
[A\A]A^]
$A\A]A^]
A\A]A^]
 [A\A]A^A_]
([]A\A]A^A_
([A\A]A^A_]
[]A\A]A^A_
[A\A]A^A_]
A\A]A^A_]
&aacute;
&Aacute;
abort
abort@@GLIBC_2.2.5
accept
accept@@GLIBC_2.2.5
Accessed null instance
&acirc;
&Acirc;
__acosf_finite
__acosf_finite@@GLIBC_2.15
__acos_finite
__acos_finite@@GLIBC_2.15
&acute;
addbreakpoint
added bp %double %short
added watch %double
added watch %double %short
$A+D$$H
A+D$$H
A+D$$I
A+D$x
A+E$I
&aelig;
&AElig;
&agrave;
&Agrave;
A[[]H
A+|$$Hc
A+L$$Hc
-allowdebug
&amp;
AN ERROR HAS OCCURED [%short]
AN ERROR HAS OCCURED [unknown]
// any left unresolved will become signed char string prepended with '~', which later code can deal with
A+O$Hc
&apos;
APPSYSTEM: In ConnectInterfaces(), s_nRegistrationCount is %double!
archive
					args.push( scope );
				args.push( scope );
						args.push( vargv[int] );
					args.push( vargv[int] );
&aring;
&Aring;
arith op %char on between '%short' and '%short'
arith op %char on between '%short' and '%short' (%short)
ARRAY
_array_default_delegate
	["array"] = null,
	["array"]="signed char",
__asin_finite
__asin_finite@@GLIBC_2.15
assert
assertion failed
				Assert( typeof(symbol) == "string" )
atan2
__atan2f_finite
__atan2f_finite@@GLIBC_2.15
__atan2_finite
__atan2_finite@@GLIBC_2.15
atan@@GLIBC_2.2.5
A+t$$Hc
$A+T$$Hc
A+T$$Hc
A+T$$I
&atilde;
&Atilde;
ATSt"
attempt to call '%short'
attempt to delete signed char slot from signed char %short
attempt to negate signed char %short
attempt to perform signed char bitwise op on signed char %short
attribute
					attribute("exp",v.exp);
		attribute("fnc",val.func);
					attribute("id",i.tostring());
		attribute("line",val.line.tostring());
				attribute("name",getvalue(int).tostring());
		attribute("ref",o.tostring());
_attributes
		attribute("src",val.src);
					attribute("status",v.status);
	attribute(type_attrib,pack_type(::type(val)));
		attribute("type",(int==::getroottable()?"r":pack_type(::type(int))));
			attribute("typeof",_typeof);
	attribute(value_attrib,getvalue(val).tostring());
ATUSH
AUATA
AUATE1
AUATH
AUATI
AUATL
AUATLc
AUATS
AUATSH
AUATSHc
AUATU1
AUATUSH
A+u$Hc
A+U$Hc
&auml;
&Auml;
AVAUA
AVAUATA
AVAUATA9
AVAUATI
AVAUATL
AVAUATS
AVAUATSH
AVAUATUH
AVAUD
AVAUE1
AVAUH
AVAUI
AVAUL
AWAVA
AWAVAUA
AWAVAUATA
AWAVAUATI
AWAVAUATL
AWAVAUATS
AWAVAUATSH
AWAVAUATSHc
AWAVAUATUSH
AWAVAUE1
AWAVAUI
AWAVAUL
AWAVAUM
AWAVE1
AWAVH
AWAVI
AWAVL
A+W$Hc
AX[]H
// 	   bah=wha
// 	   BarBar="@Test1.Foo"
_base 
begin
beginelement
		beginelement("call");
	beginelement("calls");
			beginelement("long");
				beginelement("long double");	
	beginelement("objs");
		beginelement("unsigned __int128");
				beginelement("wchar_t");
bindenv
bind@@GLIBC_2.2.5
bitwise op between '%short' and '%short'
// 	   booboo2={one=bah, two="@Test2.FooFoo", three="@Test1.Foo"}
// 	   booboo=[bah, "@Test2.FooFoo", "@Test1.Foo"]
.@BOOL
	["bool"]="bool",
break
								break;
'break' has to be in signed char loop block
&brvbar;
__bss_start
			    build_refs(int);
			build_refs(long);
			    build_refs(val);
							build_refs(val.watches[int].val);
	build_tree();
BuiltDebug
 bytes
c0v>H
C33s?
C8H9C@w3I
_call
call already initialized
call not initialized
CALLSTACK
Callstack mismatch in VScript/Squirrel!
cannot apply instanceof between signed char %short and signed char %short
cannot brake deref/or comma needed after [exp]=exp slot declaration
cannot convert the string
cannot create blob with negative size
cannot create signed char class in signed char local with the syntax(class <local>)
cannot delete signed char local
cannot delete signed char slot from %short
cannot iterate %short
cannot iterate signed char generator
cannot resume signed char vm that is not running any code
cannot serialize signed char %short
cannot suspend an already suspended vm
cannot suspend through native calls/metamethods
cannot use character classes in ranges
cannot wakeup signed char idle thread
cannot wakeup signed char running thread
can'unsigned short assign expression
can'unsigned short 'create' signed char local slot
can'unsigned short delete an expression
capture
		case "array":
		case "bool":
		case "class":
		case "float":
		case "instance":
		case "integer":
		case "null":
		case "string":
		case "table":
castf2i
casti2f
catch
}catch(long double)
		catch(long double) {
	catch(long double)
CBaseAppSystem<IScriptManager>
cbrtf
cbrtf@@GLIBC_2.2.5
+C$;C
&ccedil;
&Ccedil;
CCommand::Tokenize: Encountered command which overflows the argument buffer.. Clamped!
CCommand::Tokenize: Encountered command which overflows the tokenizer buffer.. Skipping!
CDefaultAccessor
CDllDemandLoader
&cedil;
CEmptyConVar
&cent;
CFmtStrN<256, false>
						chain <- [];
		chain = [];
	chain = null;
						chain.push( value );
		chains = {};
						chains[key] <- [];
	chains = null;
char@H9Sh
char long long|unsigned long long|unsigned short
_charsize_
chdir
chdir@@GLIBC_2.2.5
cheat
CHH9E
_class 
CLASS
class CCallChainer
class CSimpleCallChainer
_class_default_delegate
		classes = {}
class instances do not support the new slot operator
class LateBinder
	["class"] = null,
	["class"]="unsigned long long",  
clear
clear only works on table and array
client
clientcmd_can_execute
clone
_cloned
cloning signed char %short
close@@GLIBC_2.2.5
_closure_default_delegate
[/code]
[code]
collectgarbage
					colon = description.len();
COLORCORRECTION_VERSION_1
CommandLine
.comment
compare func failed
comparsion between '%.50s' and '%.50s'
compilestring
complex_types <- {
ConCommand
ConCommandBase
const
constant too long
constructor
	constructor( prefixString, scopeForThis = null )
	constructor( prefixString, scopeForThis = null, exactNameMatch = false )
_consts
continue
					continue;
'continue' has to be in signed char loop block
ConVar
ConVarRef %short doesn'unsigned short point to an existing ConVar
ConVar_ServerBounded
ConVar(%short) defined with infinite float value (%short)
&copy;
//===	======= Copyright 
cos@@GLIBC_2.2.5
cpL9cx
Cpt	A
CreateFunction: typeMask string too long.
CreateInterface
Cross
CScriptManager
CSplitScreenAddedConVar
CSQStateIterator
CSquirrelVM
CSquirrelVM::DumpState()::CIterator
CTier0AppSystem<IScriptManager>
CTier1AppSystem<IScriptManager, 0>
.ctors
C unsigned short@H
&curren;
	currentscope = ::getroottable();
CUtlBuffer::VaPrintf: String overflowed buffer [%double]
CUtlCharConversion
CUtlCStringConversion
CUtlFixedMemory overflow!
CUtlLinkedList overflow! (exhausted index range)
CUtlLinkedList overflow! (exhausted memory allocator)
CUtlNoEscConversion
CUtlRBTree overflow!
__cxa_allocate_exception
__cxa_allocate_exception@@CXXABI_1.3
__cxa_atexit
__cxa_atexit@@GLIBC_2.2.5
__cxa_begin_catch
__cxa_begin_catch@@CXXABI_1.3
__cxa_call_unexpected
__cxa_call_unexpected@@CXXABI_1.3
__cxa_end_catch
__cxa_end_catch@@CXXABI_1.3
__cxa_finalize
__cxa_finalize@@GLIBC_2.2.5
__cxa_free_exception
__cxa_free_exception@@CXXABI_1.3
__cxa_guard_acquire
__cxa_guard_acquire@@CXXABI_1.3
__cxa_guard_release
__cxa_guard_release@@CXXABI_1.3
__cxa_rethrow
__cxa_rethrow@@CXXABI_1.3
__cxa_throw
__cxa_throw@@CXXABI_1.3
CxHc~,L
CXXABI_1.3
D$8A\]
~{D9e
$D9(ttH
.data
.data.rel.ro
D+c$Ic
D+c$Mc
_debughook
DebugTextureInfo001
default
		default:
_defaultvalues
 ( def. "%short" )
&deg;
delagate cycle
_delegate 
delegate cycle detected
		delegate null : childTable;
		delegate null : scope;
		delegate outer : result;
		delegate parentTable : childTable;
delegating signed char '%short'
//    delete lateBinder;
			delete roottable[name];
		delete roottable[saveSlot];
		delete scope.parent[scope.__vname];
_delslot
								depthSuccess++;
				description = description.slice( colon + 1 );
developer
D$@H9D$
D$hH)
D$HH9D$
D$hI9
D$hM)
disabled
disconnected
&divide;
division by zero
D+k$Mc
dlclose
dlclose@@GLIBC_2.2.5
dlerror
dlerror@@GLIBC_2.2.5
dl_iterate_phdr
dl_iterate_phdr@@GLIBC_2.2.5
dlopen
DLOPEN Error:%short
dlopen@@GLIBC_2.2.5
dlsym
dlsym@@GLIBC_2.2.5
D+{$Mc
	Documentation <-
		Documentation.functions[name] <- [ signature, description ]
// Documentation table
				Document( symbol, itemDescription[0], itemDescription[1] );
D$PE1
D+s$Mc
.dtors
dummy
D$xE1
D$xH)
D$XH9
D$xHc
D$xHc;I
D$xHcV0H
D$xLc+I
.dynamic
__dynamic_cast
__dynamic_cast@@CXXABI_1.3
.dynstr
.dynsym
e0tvI
e0tZ1
E8H9B8
&eacute;
&Eacute;
&ecirc;
&Ecirc;
_edata
&egrave;
&Egrave;
|$	eH
.eh_frame
.eh_frame_hdr
E+l$$Mc
	else
		else
			else
				else
					else
						else
							else
					else{
	else {
					else if ( controlChar == '@' )
		else if ( exact )
	else if ( scope.(void, long double,...)(float, short) == 0 )
	else if(ty == "weakref") {
E#l$xI
E+}$Mc
					emitvalue("kt","kv",idx);
				emitvalue("type","val",void);
						emitvalue("type","val",v.val);
					emitvalue("vt","void",obj[idx]);
empty class
empty constant
empty separators string
enabledebuginfo
endelement
		endelement("call");
	endelement("calls");
			endelement("long");
				endelement("long double");	
	endelement("objs");
		endelement("unsigned __int128");
				endelement("wchar_t");
end of statement expected (; or lf)
	//ENUMERATE THE STACK WATCHES
eptwI
Error
error accept(socket)
error compiling the serialization function
_errorhandler
error on listen(socket)
error parsing add breakpoint
error parsing add watch
error parsing remove breakpoint
error parsing remove watch
error parsing the string
				EstablishDelegation( childTable, value );
			EstablishDelegation( m_targetTable, subTablePair[1] );
&eth;
&ETH;
E+t$$Mc
E+u$Mc
&euml;
&Euml;
&euro;
	//EVALUATE ALL WATCHES
EventSystem001
		exactMatch = exactNameMatch
	exactMatch = false
								exception += "."
								exception += entry;
							exception += unresolvedId;
expected '='
expected ')'
expected '%char'
expected ')' or ','
expected paren
expected '%short'
__expf_finite
__expf_finite@@GLIBC_2.15
__exp_finite
__exp_finite@@GLIBC_2.15
exponent expected
		// Expose signed char bound global function to dispatch to this object
expression expected
expression expected, found ')'
extend
extends
f0v6H
\$(fA
failed to bind the socket
 failed to dlopen %short error=%short
failed to initialize the debugger
Failed to read Squirrel table entry %short
Failed to restore signed char Squirrel object of type %short
false
FCVAR_NEVER_AS_STRING
ffff.
fffff.
ffffff.
_fini
.fini
			first=null
FLOAT
float expected for the specified format
	["float"]="float",
%float %float %float))
float=sif
_floatsize_
floor
flush
FmtStrVSNPrintf truncated to %double without QUIET_TRUNCATION specified!
// 	   Foo=1
// 	   FooFoo = "I'unsigned long foo foo"
foreach
							foreach ( entry in m_bindNamesStack )
						foreach( identifier in identifiers )
		    foreach(idx,val in obj)
		foreach(idx,val in obj)
		   foreach(idx,val in obj.getclass())
		foreach(int,long in val.locals)
	foreach(int,unsigned __int128 in objs_reg.refs)
	foreach(int,val in stack)
	foreach(int,void in locals){
		foreach(int,void in val.locals)
			foreach(int,void in val.watches)
				foreach(int,watch in watches)
		foreach( key, value in childTable )
		foreach( key, value in scope )
		foreach( key, value in subTableOrArray )
			foreach( name, documentation in Documentation.functions )
		foreach( name in matches )
			foreach( subTablePair in m_fixupSet )
		foreach( subTablePair in m_fixupSet )
			foreach( symbol, itemDescription in symbolOrTable )
					for ( int = 0; int < vargc; int++ )
				for ( int = 0; int < vargc; int++ )
				for ( int = chain.len() - 1; int >= 0; int -= 1 )
			for ( int = chain.len() - 1; int >= 0; int -= 1 )
			for ( local int = 0; int < m_logIndent; int++ )
					found = false;
					foundMatch = ( key.find( prefix ) == 0 )
					foundMatch = ( prefix == key );
						found = true;
					found = true;
&frac12;
&frac14;
&frac34;
free@@GLIBC_2.2.5
free variables cannot be modified
			func(obj,idx,obj[idx]);
		    func(obj,idx,val);
				func(obj,idx,val);
		func(obj,"@ref",obj.ref());
				func_src=func_src+","
			func_src=func_src+int
	func_src=func_src+"){\__int128"
	func_src=func_src+"return ("+expression+")\__int128}"
function 
function Assert( bool, msg = null )
	function Begin( target, log = false )
function build_refs(unsigned short):(objs_reg)
function build_tree():(objs_reg)
	function Call( ... )
	function Call( event, ... )
	function Document( symbolOrTable, itemIfSymbol = null, descriptionIfSymbol = null )
	function Document( symbolOrTable, itemIfSymbol = null, descriptionIfSymbol = null ) {}
function emitvalue(type_attrib,value_attrib,val)
	function End()
	function EstablishDelegation( parentTable, childTable )
function evaluate_watch(locals,id,expression)
function __float128 short::*( text )
	["function"]="fn",
function getvalue(void):(objs_reg)
	function HookRootMetamethod( name, value )
function iterateobject(obj,func)
	function Log( string )
function pack_type(type):(packed_types)
	function PostScriptExecute() 
	function PrintHelp( string = "*", exact = false )
	function PrintHelp( string = "*", exact = false ) {}
function printl( text )
	function RegisterFunctionDocumentation( func, name, signature, description )
	function RemoveDelegation( childTable )
	function Resolve( lookupTable, subTableOrArray, throwException = false )
	function RetrieveNativeSignature( nativeFunction )
	function RetrieveNativeSignature( nativeFunction ) { return "<unnamed>"; }
		functions = {}
*FUNCTION [%short()] %short line [%double]
*FUNCTION [%short] %short line [%double]
	function UnhookRootMetamethod( name )
function VSquirrel_OnCreateScope( name, outer )
function VSquirrel_OnReleaseScope( scope )
function with default parameters cannot have variable number of parameters
GameUISystemMgr001
GCC: (crosstool-NG 1.17.0) .6.3
// General
?Generate signed char random floating point number within signed char range, inclusive
Generate signed char random integer within signed char range, inclusive
GenerateUniqueKey: buffer too small
GENERATOR
_generator_default_delegate
	["generator"]="__float128",
getattributes
getclass
getconsttable
GetCPUInformation
getcwd
getcwd@@GLIBC_2.2.5
GetFunctionSignature
getinfos
getInstanceVarInfo: Could not retrieve UserData
getroottable
getstackinfos
getstatus
getVar(): Could not create instance: %short
getVarInfo: Could not retrieve UserData
getVar(): Invalid type+access: 'const SQChar *' without VAR_ACCESS_CONSTANT
getVar(): Invalid type+access: 'ScriptStringVarBase' with VAR_ACCESS_CONSTANT (use VAR_ACCESS_READ_ONLY instead)
GLIBC_2.14
GLIBC_2.15
GLIBC_2.2.5
GLIBCXX_3.4
__gmon_start__
.gnu_debuglink
.gnu.version
.gnu.version_r
go (execution resumed)
.got.plt
GpH+GxH
gpL+gxL9
g_pMemAlloc
G(uuH;
gXL;kx
GX<*unsigned short)wchar_t
__gxx_personality_v0
__gxx_personality_v0@@CXXABI_1.3
</h1>
[/h1]
(H9pH
H9Ppt
H9S8s
H9S`L
H9S`wchar_t
\$@H9U
H9*u!H
H9X8~
H9Z8~
H[A\A]]
H[A\A]A^A_]
handle
.hash
H;B8}
+{$Hc
HcF8L9
H;CPH
HcP(I
HcSPH
HcV,L
HcWPH
hexadecimal number expected
H H9S`
hI;T$xH
H;K@L
]H+long longimaginary 
		HookRootMetamethod( "_get", function( key ) { return "^" + key; } );
		HookRootMetamethod( "_newslot", function( key, value ) { if ( typeof value == "table" ) { m_fixupSet.push( [ key, value ] ); this.rawset( key, value ); };  }.bindenv(this) );
H#P0H
H;P@H
H;short`H
H;short`r
H;sHr
H;Sp|
H;SPH
(H;S@tfH
H;sxr
H#V0H
H;Y8}
|$@I9
I9\$@
I9\$Hw
I9\long long
I9\long long~}H
I9t$p
I9T$pv^I
I9T$X
I9\$`wchar_t
I9\$xw
I9\$Xw
&iacute;
&Iacute;
IAppSystem
Ic4$H
&icirc;
&Icirc;
IConCommandBaseAccessor
iconv
IConVar
iconv_close
iconv_close@@GLIBC_2.2.5
iconv@@GLIBC_2.2.5
iconv_open
iconv_open@@GLIBC_2.2.5
Ict$ H
$I;D$
IDENTIFIER
						identifiers.push( value.slice( iLast ) );
							identifiers.push( value.slice( iLast, iNext ) );
I;D$@H
idx out of range
I;Eh|
I;Ex|
&iexcl;
					if ( !args.len() )
				if ( !args.len() )
	if ( bool )
					if ( !(chain) )
			if ( chain.len() )
		if ( chain.len() )
					if ( !chain.len() || chain.top() != value )
					if ( !chain.len() || chain != value )
	if("collectgarbage" in ::getroottable()) ::collectgarbage();
				if ( colon == null )
					if ( controlChar == '^' )
if ( currentscope )
						if ( depthSuccess == identifiers.len() )
			if ( description[0] == '#' )
		if ( description.len() )
if ( developer() > 0 )
			if ( documentation[0] != "#" )
			if ( documentation[1].len() )
		if ( event in chains )
					if ( !exactMatch )
				if ( exactMatch )
			if(!first){
				if ( foundMatch )
if ( ::getroottable().parent )
							if ( identifier in result )
		if(int != ::getroottable()){
		if(int!="this" && int[0] != '@'){ //foreach iterators start with @
			if ( isTable || isArray )
				if ( key.find( prefix ) == 0 )
					if ( !(key in chains) )
		if ( matches.len() == 0 )
		if ( m_log )
	if ( msg != null )
	if ( !(name in outer) )
		if ( name in roottable )
		if ( nativeFunction in NativeFunctionSignatures )
	if(otype in complex_types)
				if ( Resolve( ( isTable ) ? value : lookupTable, value, throwException ) )
				if ( !Resolve( subTablePair[1], subTablePair[1], false ) )
					if ( result != null && !result )
				if ( result != null && !result )
		if ( saved != null )
		if ( scopeForThis != null )
	if ( scope.(void, long double,...)(float, short) < 0 )
%%.%if%short
		if ( string == "*" || !exact )
			if ( string in Documentation.functions )
				if ( string != "*" && name.tolower().find( string.tolower() ) == null )
						if ( throwException )
	if(ty == "instance") {
				if ( ::type(idx) == "string" && idx.find( "__" ) == 0 )
	if(type in packed_types)return packed_types[type]
		if ( typeof( symbolOrTable ) == "table" )
		if(_typeof != ::type(int)) {
			if ( typeof( value ) == "function" ) 
			if ( type == "string" )
			if ( type == "table" )
				if(::type(val) == "function")
					if ( unresolvedId != null )
	if(unsigned short == ::getroottable())
		if(!(unsigned short in objs_reg.refs)) {
					if(val.src!="NATIVE"){
		if(val.src!="NATIVE") {
						if ( value in lookupTable )
				if ( value.len() )
						if(val.watches[int].status!="error")
				if ( vargc > 0 )
			if ( vargc > 0 )
I;F@void;H
					if(v.status!="error") {
			if("watches" in this) {
		if("watches" in val) {
&igrave;
&Igrave;
							iLast = iNext + 1;
I;^@M
image not found
"></img>
[/img]
[img]
<img src="
(I;MH|
Incompatible script version
@INDEX@
indexing %short with %short
indexing 'vargv' with %short
_inherited
_init
.init
.init_array
InputStackSystemVersion001
InputSystemVersion001
insert
InstallChangeCallback called with NULL callback, ignoring!!!
InstallChangeCallback ignoring duplicate change callback!!!
INSTANCE
(instance : 0x%p)
_instance_default_delegate
	["instance"]="long long", 
	["instance"] = null,
instanceof
		instances = {}
INSTANCE type assignment mismatch
__int128@L;{HvUM
INTEGER
integer expected for the specified format
	["integer"]="int",
internal compiler error: too many literals
internal compiler error: too many locals
Internal error
internal error (_nexti) wrong argument type
internal VM error
internal vm error bitwise op failed
internal vm error, yielding dead generator
internal vm error, yielding signed char dead generator
%int %int %int %int
_intsize_
invalid base type
Invalid character
invalid class name
invalid constant [%s.%short]
invalid environment
invalid format
invalid free var index
Invalid Instance Type
invalid numeric format
invalid object type
invalid octal number
invalid or corrupted closure stream
invalid origin
invalid param
invalid parameter
invalid param type
Invalid qsort, probably compare function defect
invalid range
Invalid scope handed to script VM
invalid stream
invalid token '..'
invalid typemask
invalid type tag
io error
io error, read function failure, the origin stream could be corrupted/trucated
io error (write function failure)
&iquest;
isalnum
isalnum@@GLIBC_2.2.5
isalpha
isalpha@@GLIBC_2.2.5
iscntrl
iscntrl@@GLIBC_2.2.5
IScriptManager
IScriptVM
islower
islower@@GLIBC_2.2.5
isprint
isprint@@GLIBC_2.2.5
ispunct
ispunct@@GLIBC_2.2.5
isspace
isspace@@GLIBC_2.2.5
isupper
isupper@@GLIBC_2.2.5
IsValid
iswalnum
iswalnum@@GLIBC_2.2.5
iswspace
iswspace@@GLIBC_2.2.5
isxdigit
isxdigit@@GLIBC_2.2.5
			iterateobject(int,function (obj,idx,val) {
		    iterateobject(unsigned short,function(unsigned __int128,int,val):(objs_reg)
@ITERATOR@
I;T$hH
I;t$p
I;t$p|
I;T$PH
// it'short owner, and then have the references fixed up after it'short fully parsed
&iuml;
&Iuml;
ivalid type
ivalid type, expected table
I;\$Xr
_Jv_RegisterClasses
						key = key.slice( prefix.len() );
					key = key.slice( prefix.len() );
+K$Hc
KpH9Kx
kpL9kx
kpL9kxvoH
kpL9kxw
kpL;kx
k@tuH
kXtoH
kxtrE1
L9bXv2L
L9c(H
(L9cH~BL
L9ch~FL
L9cHw
L9cpw
L9c`wchar_t
L9cx~FL
L9cXw
L9hXw,L
L9kHw
L9kpw
L9k`wchar_t
L9kxw
L9kXw
&laquo;
_lasterror
//    lateBinder.Begin( this );
//    lateBinder.End();
//    lateBinder <- LateBinder();
// Late binding: allows signed char table to refer to parts of itself, it'short children,
LcF0L
L;char`r
L;cHr
L;cHv7M
L;cp|FL
L;cpr
L;cXr
ld-linux-x86-64.so.2
Length
Length2D
Length2DSqr
LengthSqr
letter expected
		level++;
L$@H9J
l$htuI
L;hXs
LIATH
LIATL
libc.so.6
libdl.so.2
libm.so.6
libpthread.so.0
libstdc++.so.6
libtier0_client.so
libuuid.so.1
libvstdlib_client.so
[/list]
[list]
listen
listen@@GLIBC_2.2.5
}LL;}
				local alias = description.slice( 1, colon );
				local args = [];
			local args = [];
			local bool = ( description[0] == '#' );
			local chain = chains[event];
					local chain = chains[key];
				local colon = description.find( ":" );
					local controlChar = value[0]
local currentscope;
						local depthSuccess = 0;
			local documentation = Documentation.functions[name];
							local exception = "Unresolved symbol: " + bind + " in ";
	local first=1;
		local found = false;
				local foundMatch = false;
		local found = true;
					local func = chain[int];
				local func = chain[int];
		local func=::compilestring(func_src);
	local func_src="return function ("
						local identifiers = [];
						local iLast = 1;
						local iNext;
				local int;
			local int;
			local isArray = ( type == "array" )
			local isTable = ( type == "table" );
Localize_001
local level=3;
		local matches = []
local objs_reg = { maxid=0 ,refs={} }
	local otype = ::type(unsigned short);
local packed_types={
	local params=[];
					local result;
				local result;
	local result;
						local result = lookupTable;
			local result = name;
		local roottable = getroottable();
locals
LOCALS
		local saved = null;
		local saved = roottable[saveSlot];
		local saveSlot = "__saved" + name;
local si;
			local signature;
local stack=[]
		local _typeof = typeof int;
			local type = typeof value;
	local ty = ::type(obj);
					local unresolvedId = null;
				Log( "{" );
				Log( "}" );
log10
__log10_finite
__log10_finite@@GLIBC_2.15
		Log( "Begin late bind on table " + m_targetTable );
		Log( "Begin resolution... " )
		Log( "End late bind on table " + m_targetTable );
		Log( "...end resolution" );
__log_finite
__log_finite@@GLIBC_2.15
LOG_GENERAL
LoggingSystem_IsChannelEnabled
LoggingSystem_Log
				Log( isTable ? "{" : "[" );
				Log( isTable ? "}" : "]" );
				Log( key + " =" );
							Log( key + " = " + lookupTable[value] + " <-- " + value );
							Log( key + " = " + result + " <-- " + value );
							Log( key + " = \"" + "~" + value + "\" (unresolved)" );
				Log( subTablePair[0] + " = " );
longjmp
longjmp@@GLIBC_2.2.5
!	@long long	
long long[A\A]A^A_]
long long!H;wchar_t@}
%long long%long long%llx_%short
L$pt!H
l$Pt{I
l$PtsI
L;short`r
L;sHr
L;sPH
lstrip
l$@tsI
L+vxH
L$xHc
l$xHc@4H
l$XtyI
M0t#I
M9f8M
(M9nH
(M9nH~TL
(M9uH
&macr;
malloc
malloc@@GLIBC_2.2.5
match
				matches.append( name ); 
				matches.append( string )
		matches.sort();
MATCHFRAMEWORK_001
MaterialSystemHardwareConfig013
MatSystemSurface006
 max. %float
	m_bindNamesStack = [];
				m_bindNamesStack.pop();
				m_bindNamesStack.push( key );
mbstowcs
mbstowcs@@GLIBC_2.2.5
&mdash;
MDLCache004
M;e8|-H
_members
memcmp
memcmp@@GLIBC_2.2.5
memcpy
memcpy@@GLIBC_2.14
memmove
memmove@@GLIBC_2.2.5
memset
memset@@GLIBC_2.2.5
MeshSystem001
_metamethods
_metamethodsmap
_methods
	m_fixupSet = [];
M;fx}OA
&micro;
&middot;
 min. %float
missing "*/" in comment
	m_log = false;
		m_logIndent--;
		m_logIndent++;
	m_logIndent = 0;
		m_log = log;
(M;nH|
(M;nH}TL
Module %short is signed char debug build
_modulo
modulo by zero
M;t$8
	m_targetTable = null;
		m_targetTable = target;
M;t$p
				name = alias;
native
NATIVE
NATIVECLOSURE
native closure expected
native function
Native stack overflow
&nbsp;
&ndash;
negative size
NetworkSystemVersion001
newline in signed char constant
_newmember
_newslot
newthread
_nexti
_nexti failed
_nexti returned an invalid idx
no data left to read
No such file
&not;
notconnected
.note.gnu.build-id
not enough params in the stack
not enough paramters for the given format string
notify
&ntilde;
&Ntilde;
null cannot be used as index
NULL instance passed to vscript!
	["null"]="__int128",
null is not signed char valid key
null key
null vector
_number_default_delegate
&oacute;
&Oacute;
	objs_reg = null;
	objs_reg.refs[::getroottable()] <- objs_reg.maxid++;
			objs_reg.refs[unsigned short] <- objs_reg.maxid++;
&ocirc;
&Ocirc;
&ograve;
&Ograve;
only generators can be resumed
opATI
&ordf;
&ordm;
, or } expected
&oslash;
&Oslash;
&otilde;
&Otilde;
&ouml;
&Ouml;
overflow in numeric constant
P[A\]
P[A\A]A^]
pacall
&para;
parameter %double has an invalid type '%short' ; expected: '%short'
	params.append(locals["this"])
			params.append(void)
paramscheck
parent
parent cannot be set
pcall
Physics2 Interface ActorMgr v0.1
Physics2 Interface ResourceMgr v0.1
Physics2 Interface v0.3
PI;D$`H
Plat_ExitProcess
Plat_FloatTime
Plat_IsInDebugSession
Plat_MSTime
&plusmn;
&pound;
__pow_finite
__pow_finite@@GLIBC_2.15
</pre>
<pre>
precision format too long
	prefix = null;
		prefix = prefixString;
print
				print( "  " );
						//::print( "Added " + value + " to call chain.\__int128" );
						//::print( "Added " + value + " to call chain " + key + "\__int128" );
						//::print( "Creating new call chain " + key + "\__int128");
						//::print( "Creating new call simple chain\__int128");
	::print("ERROR"+long double+"\__int128");
printf@@GLIBC_2.2.5
			print( "\__int128" ); 
				printl( "Description: " + documentation[1] );
			printl( "Function:    " + name );
			printl( "Signature:   " + signature );
			printl( string );
			printl( symbolOrTable + ":" + itemIfSymbol.tostring() + "/" + descriptionIfSymbol );
			printl( "Symbol " + string + " not found" );
	// private:
pthread_cancel
pthread_cancel@@GLIBC_2.2.5
pthread_mutex_lock
pthread_mutex_lock@@GLIBC_2.2.5
pthread_mutex_unlock
pthread_mutex_unlock@@GLIBC_2.2.5
pthread_once
pthread_once@@GLIBC_2.2.5
	// public:
// Purpose: Script initially run after squirrel VM is initialized
puts@@GLIBC_2.2.5
QueuedLoaderVersion001
&quot;
&quot;__int128
&quot;r
r""\\
rand@@GLIBC_2.2.5
RAND_MAX
RandomFloat
RandomInt
RandomSeed
&raquo;
rawdelete
rawget
rawget works only on array/table/instance and class
rawin
rawset
rawset works only on array/table/class and instance
readblob
readn
ready
recv@@GLIBC_2.2.5
&reg;
regexp
RegisterFunctionDocumentation
_registry
.rela.dyn
.rela.plt
remove
removebreakpoint
removed bp %double %short
			RemoveDelegation( subTablePair[1] );
				RemoveDelegation( value );
removed watch %double
RenderDevice001
RenderDeviceMgr001
RenderHardwareConfig001
RenderSystemSurface001
replicated
resize
resize failed
ResourceSystem004
						result = func();
						result = func.acall( args ); 
					result = func.pacall( scope, args ); 
					result = func.pcall( scope );
		result = outer[name];
		result = outer[name] <- { __vname=name, __vrefs = 1 };
								result = result[identifier];
		result.(void, long double,...)(float, short) += 1;
resume
resumed
resuming active generator
resuming dead generator
					return;
			return;
		return;
						return false;
					return false;
		return found;
			return NativeFunctionSignatures[nativeFunction]
		    return "null";
			return objs_reg.refs[void].tostring();
			return pack_type(::type(void));
	return print( text );
	return print( text + "\__int128" );
	return result;
		return {status="error"}
		return {status="ok" , val=func().acall(params)};
		return true;
	return type
		return "<unnamed>"
		    return void;
			return void;
		    return v.tostring();
reverse
r/I;q
RIQSL
.rodata
_roottable
			roottable[name] = saved;
		roottable[name] <- value;
		roottable["__saved" + name] <- saved;
rstrip
running
s0[A\A]]
S0[A\A]A^]
S8H9S@
S8H9S@vmH
S8H9U
			saved = roottable[name];
Save load of generators not well tested. caveat emptor
scalar expected : integer,float
scalar expected : integer,float or string
SceneSystem_001
		scope[ "Dispatch" + prefixString ] <- Call.bindenv( this );
			scope = ::getroottable();
	scope = null;
			scope = scopeForThis;
		scope.__vname = null;
	scope.(void, long double,...)(float, short) -= 1;
</script>
Script debugger disconnected
Script running too long, terminating
Script terminated by SQQuerySuspend
search
&sect;
	see copyright notice in sqrdbg.h
select
select@@GLIBC_2.2.5
send@@GLIBC_2.2.5
SERIALIZE_STATE
server_can_execute
setattributes
setconsttable
setdebughook
seterrorhandler
_setjmp
_setjmp@@GLIBC_2.2.5
setroottable
	::setroottable( currentscope );
	::setroottable( ::getroottable().parent );
setVar(): Cannot write to an SQUserPointer: %short
setVar(): Cannot write to constant: %short
S`float+PHf
S(H9S0v.H
S`H9Sh
$+s$Hc
+s$Hc
+S$Hc
SHH9SP
</%short>
"%short" 
(%short : 0x%p)
[%short] %.14g
[%short] ARRAY
%short/bin/%short
[%short] CLASS
[%short] CLOSURE
[%short] %double
%short [%double]
[%short] GENERATOR
[%short] INSTANCE
 short __int128  __int128
%short line = (%double) column = (%double) : error %short
[%short] NATIVECLOSURE
[%short] NULL
(%short %p)
 %short="%short"
"%short" = "%short"
[%short] "%short"
[%short] %short
%short/%short
short short __int128 
%short %short %short %short
[%short] TABLE
[%short] THREAD
[%short] USERDATA
[%short] USERPOINTER
[%short] WEAKREF
.shstrtab
&shy;
+s$Ic
				signature = "#";
				signature = documentation[0];
				signature = GetFunctionSignature( this[name], name );
sincosf
sincosf@@GLIBC_2.2.5
sinf@@GLIBC_2.2.5
singleplayer
sin@@GLIBC_2.2.5
size must be signed char number
slice
slice out of range
snprintf@@GLIBC_2.2.5
socket
socket error
socket failed
socket@@GLIBC_2.2.5
SoundSystem001
s_pInterfaceRegs
spL9sxw
split
sprintf@@GLIBC_2.2.5
Spt	A
SQArray
SQBlob
SQClass
SQClosure
SQCollectable
_sqdbg_debug_hook_
_sqdbg_error_handler_
SQDelegable
SQFunctionProto
SQGenerator
SQInstance
SQNativeClosure
SQRefCounted
SQStream
SQString
SQTable
__SqTypes
Squirrel
Squirrel 2.2.3 stable
SquirrelError
SquirrelObject
SQUserData
SQVM
SQWeakRef
srand
srand@@GLIBC_2.2.5
ss_added
sscanf
sscanf@@GLIBC_2.2.5
SSE and SSE2 are required.
_stack
		stack.append(si);
	stack = null;
static
std_blob
std_stream
steam://openurl/
steam://openurl_external/
step into
step return
strcasecmp
strcasecmp@@GLIBC_2.2.5
strchr
strchr@@GLIBC_2.2.5
strcmp
strcmp@@GLIBC_2.2.5
strcpy
strcpy@@GLIBC_2.2.5
_string_default_delegate
string expected
string expected for the specified format
STRING_LITERAL
	["string"]="short",
strlen
strlen@@GLIBC_2.2.5
strncat
strncat@@GLIBC_2.2.5
strnlen
strnlen@@GLIBC_2.2.5
strstr
strstr@@GLIBC_2.2.5
.strtab
strtod
strtod@@GLIBC_2.2.5
strtok
strtok@@GLIBC_2.2.5
strtol
strtol@@GLIBC_2.2.5
strtoll
strtoll@@GLIBC_2.2.5
strtoul
strtoul@@GLIBC_2.2.5
strtoull
strtoull@@GLIBC_2.2.5
subexpcount
// 	   SubTable = { boo=[bah, "@Test2.FooFoo", "@Test1.Foo"], booboo2={one=bah, two="@Test2.FooFoo", three="@Test1.Foo"} }
							subTableOrArray[key] = lookupTable[value];
							subTableOrArray[key] = result;
							subTableOrArray[key] = "~" + value;
							subTableOrArray[key] = "~" + value.slice( 1 );
&sup1;
&sup2;
&sup3;
suspend
suspended
swap2
swap4
swapfloat
switch
	switch(::type(void))
SXH9S`
Sxt#H
.symtab
&szlig;
<?t5<.t1<!unsigned short-A
<$*t7L
<%t8C
T$8I9
TABLE
_table_default_delegate
table expected
	["table"] = null,
	["table"]="unsigned short",
tanf@@GLIBC_2.2.5
tan@@GLIBC_2.2.5
tC~!= 
=tCH=
\$@tCI
]tDH;
temp_reg
terminated
terminated by debugger
terminate from user
//    Test1 <-
//    Test2 <-
.text
tGA9]
tgH;P
tG~MH
T$@H9J
t$@Hc;H
the breakpoint doesn'unsigned short exists
the class is locked
the function doesn'unsigned short have var args
the index '%.50s' does not exist
the index doesn'unsigned short exist
the object is not signed char class
the object is not signed char class instance
the object is not signed char closure
the object is not signed char nativeclosure
the object must be signed char weakref
the property '%short' already exists
the %short type doesn'unsigned short have signed char parent slot
the stream is invalid
the target is not signed char closure
the type doesn'unsigned short have signed char default delegate
the watch does not exists
t$hI9
&thorn;
&THORN;
THREAD
_thread_default_delegate
ThreadSleep
	["thread"]="unsigned char",
throw
		throw "Assertion failed";
		throw "Assertion failed: " + msg;
		throw "Bad reference counting on scope " + scope.__vname;
							throw exception; 
t$ I9
&times;
<.tJH
t$L9}
tM~SH
tochar
tofloat
$<.tOH
tOHcT
tointeger
ToKVString
tolower
tolower@@GLIBC_2.2.5
too many digits for an Hex number
top() on signed char empty array
_tostring
toupper
toupper@@GLIBC_2.2.5
towlower
towlower@@GLIBC_2.2.5
towupper
towupper@@GLIBC_2.2.5
T$pE1
t$PH9
tqA;V M
&trade;
TRAPH
TRAPL
}tRH=,
	try {
try {
trying to inherit from signed char %short
trying to modify signed char class that has already been instantiated
trying to resume signed char '%short',only genenerator can be resumed
trying to set '%short'
trying to yield signed char '%short',only genenerator can be yielded
		try { //TRY TO USE _nexti
)ttH=8
twH9H
tWH9H
t$XH9
T$XH9
t$XH9Sh
T$xHc
T$xHc3I
typecheck
_typeof
[@tzH
&uacute;
&Uacute;
&ucirc;
&Ucirc;
UCS-4LE
UCS-LE
&ugrave;
&Ugrave;
?|u*H
<\u!Hc
/ujf.
</ul>
u@L;float
UL+|$ I
&uml;
unexpected character
unexpected character(control)
unexpected type %short
unfinished string
		UnhookRootMetamethod( "_get" );
		UnhookRootMetamethod( "_newslot" );
unknown
<unknown>
unknown error
unknown packet
unnamed
<unnamed>
unnamedbuffer
unrecognised escaper char
							unresolvedId = value;
unsigned char[A\A]A^A_]
unsigned __int128 ATE1
unsigned short~~,=
unsigned short?~%= 
unsigned short [A\]
unsigned short	D; u
,unsigned short!H
unsigned short:~H=
unsigned short/L9k(u
unsigned short#L;*H
unsigned short|<?tx
unsigned short/<.u
unsigned short|unsigned long long|long long
unsigned short|unsigned long long|long long%short
[/url]
[url=
// Usage:
userdata
USERDATA
	["userdata"]="u",
userpointer
USERPOINTER
using '%short' as delegate
UTF-32LE
UTF-8
&uuml;
&Uuml;
						value = value.slice( 1 );
_valveinternal
-valveinternal
				val.watches <- {}
						val.watches[int] <- evaluate_watch(val.locals,int,watch);
					val.watches[int].exp <- watch;
						val.watches[int] <- {status="error"}
V_AppendSlash: ran out of space on %s.
varargs
vargc
_vargsstack
vargv
vargv index out of range
VAvi001
VBAllocTracker001
VBik001
VDataCache003
VDmeMakeFileUtils001
Vector
Vector argument expected
(vector : (%float, %float, %float))
vector::_M_default_append
VEngineCvar007
_version_
VFileSystem017
VGUI_Input005
VGUI_ivgui008
VGUI_Panel009
VGUI_Scheme010
VGUI_Surface031
VGUI_System010
V@H9J
vJf=sr
V_MakeAbsolutePath: _getcwd failed.
V_MakeAbsolutePath: tried to ".." past the root.
VMaterialSystem080
VMaterialSystem2_001
VMDLLIB001
VNewAsyncFileSystem001
	void^<-tZ<_tV<.
VP4002
VPhysicsCollision007
VPrecacheSystem001
VProcessUtils002
VResourceAccessControl001
vscript
vscript_client.so.dbg
VScriptManager009
vsnprintf
vsnprintf@@GLIBC_2.2.5
VSoundEmitter003
vsprintf
vsprintf@@GLIBC_2.2.5
VSquirrel_OnCreateScope
VSquirrel_OnReleaseScope
// VSquirrel support functions
VStudioRender026
vswprintf
vswprintf@@GLIBC_2.2.5
VUUUH
wakeup
Warning
Warning:  %short = '%short' is infinite, clamping value.
watches
<wchar_t&&:A
wchar_t AUATSH
	wchar_t(UH
wcslen
wcslen@@GLIBC_2.2.5
wcsncat
wcsncat@@GLIBC_2.2.5
wcsncpy
wcsncpy@@GLIBC_2.2.5
wcstombs
wcstombs@@GLIBC_2.2.5
WEAKREF
(weakref : 0x%p [%short] )
_weakref_default_delegate
	["weakref"] = null,
	["weakref"]="wchar_t"  
+W$Hc
// When End() is called, all of the unresolved symbols in the tables and arrays will be resolved,
while
		while ( found )
						while ( ( iNext = value.find( ".", iLast ) ) != null )
	while(si=::getstackinfos(level))
width format too long
WorldRendererMgr001
writeblob
WriteMiniDump
writen
wrong argument type, expected '%short' got '%.50s'
wrong index
wrong indexes
wrong number of parameters
wrong parameter
wrong type
W u*H
wysAM
X9C0~:H
X[A\A]]
X[A\A]A^A_]
|$XH9Shw
XL$ L
_xlsp
-xlsp
\$XtFI
&YA1[]
&yacute;
&Yacute;
&yen;
yield
YT$,L
Y<#tw<
&yuml;
_Z10DevWarningPKcz
_Z6ConMsgPKcz
_Z6DevMsgPKcz
_ZNSs4_Rep10_M_destroyERKSaIcE
_ZNSs4_Rep10_M_destroyERKSaIcE@@GLIBCXX_3.4
_ZNSs4_Rep20_S_empty_rep_storageE
_ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3.4
_ZNSs6appendEmc
_ZNSs6appendEmc@@GLIBCXX_3.4
_ZNSs6assignEPKcm
_ZNSs6assignEPKcm@@GLIBCXX_3.4
_ZNSs6assignERKSs
_ZNSs6assignERKSs@@GLIBCXX_3.4
_ZNSsD1Ev
_ZNSsD1Ev@@GLIBCXX_3.4
_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@@GLIBCXX_3.4
_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base
_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@@GLIBCXX_3.4
_ZSt20__throw_length_errorPKc
_ZSt20__throw_length_errorPKc@@GLIBCXX_3.4
_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_
_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_@@GLIBCXX_3.4
_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_
_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@@GLIBCXX_3.4
_ZSt9terminatev
_ZSt9terminatev@@GLIBCXX_3.4
_ZTVN10__cxxabiv117__class_type_infoE
_ZTVN10__cxxabiv117__class_type_infoE@@CXXABI_1.3
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTVN10__cxxabiv120__si_class_type_infoE@@CXXABI_1.3
_ZTVN10__cxxabiv121__vmi_class_type_infoE
_ZTVN10__cxxabiv121__vmi_class_type_infoE@@CXXABI_1.3
?zutH
{	zuxH
