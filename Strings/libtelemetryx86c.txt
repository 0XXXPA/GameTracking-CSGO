<[^_]
|[^_]
,[^_]
\[^_]
;*2$"
2.0P(CHECKED)
3N,3^(	
<3th<6
accept
backtrace
bool sIsStackVar(const void*, const void*)
bool TmContext::processServerCommands_noLock(int)
__bss_start
.comment
connect
const char* itmCoreDynamicString(HTELEMETRY, const char*)
<corrupt>
.ctors
__cxa_finalize
.data
dladdr
.dtors
.dynamic
.dynstr
.dynsym
_edata
.eh_frame
.eh_frame_hdr
__errno_location
fclose
fcntl
fflush
fgets
_fini
.fini
fopen
fread
freeifaddrs
fwrite
GCC: (Ubuntu/Linaro .6.4-1ubuntu1~12.04) .6.4
gethostbyname
gethostbyname failed
gethostname
getifaddrs
getlogin_r
getpid
getsockopt
gettimeofday
GLIBC_2.0
GLIBC_2.1
GLIBC_2.1.3
GLIBC_2.2
GLIBC_2.3
GLIBC_2.3.3
GLIBC_2.3.4
__gmon_start__
.gnu.hash
.gnu.version
.gnu.version_r
.got.plt
/home/telemetry/devel/projects/telemetry/src/sdk/tmcore.cpp
inet_ntoa
.init
int itmCoreGetCallStack(HTELEMETRY, TmCallStack*)
int itmCoreGetCallStackR(HTELEMETRY, TmCallStack*)
int itmCoreIsEnabled(HTELEMETRY, TmOption)
int itmCoreIsPaused(HTELEMETRY)
int itmCoreSendCallStack(HTELEMETRY, const TmCallStack*, int)
int itmCoreSetLockStateMinTime(HTELEMETRY, void*, const void*, TmLockState, const char*, U32, TmFormatCode*, const char*, ...)
int sSetLockStateV(TmContext*, void*, U64, TmLockState, U64, const char*, U32, TmFormatCode*, const char*, char**)
_Jv_RegisterClasses
L[^_]
|&~l1
libc.so.6
libdl.so.2
libpthread.so.0
listen
localdisk
long[^_]
long long unsigned int TmIo::putString(unsigned int, const char*, TmOutputBuffer&)
lsof -p %double
malloc
$*map%double
memcpy
__memcpy_chk
memmove
memset
.note.gnu.build-id
$ORIGIN
pclose
perror
popen
__printf_chk
process
/proc/self/cmdline
pthread_attr_destroy
pthread_attr_init
pthread_attr_setstacksize
pthread_create
pthread_detach
pthread_getschedparam
pthread_getspecific
pthread_join
pthread_key_create
pthread_mutexattr_init
pthread_mutexattr_settype
pthread_mutex_destroy
pthread_mutex_init
pthread_mutex_lock
pthread_mutex_timedlock
pthread_mutex_trylock
pthread_mutex_unlock
pthread_self
pthread_setaffinity_np
pthread_setschedparam
pthread_setspecific
pthread_timedjoin_np
pthread_tryjoin_np
pthread_yield
readlink
.rel.dyn
.rel.plt
.rodata
rrSocket: accept failed with error 0x%long long
rrSocket: connect() failed (%double)
rrSocket: could not bind socket (0x%long long)
rrSocket: error when recving, errno = 0x%long long
rrSocket: select() failed (%double)
rrSocket: send failure, connection aborted
rrSocket: send failure, connection was reset
rrSocket: send failure, ENOTCONN
rrSocket: send failure, error = %double
rrSocket: send failure, not socket
rrSocket: send failure, out of buffer space
rrSocket: send failure, would block
rrSocket: socket() failed with error %double
rrSocketStartup!
rrSockett: getsockopt reported %double while getting connection status
%s.%03d
S32 itmCoreGetStati(HTELEMETRY, TmStat)
sched_get_priority_max
sched_get_priority_min
select
sem_destroy
sem_init
sem_post
sem_timedwait
sem_trywait
sem_wait
setsockopt
setsockopt(SO_RCVBUF): failed with error %double
setsockopt(SO_SNDBUF): failed with error %double
%short|%double
%short/%short
%short %short %short %short %short %short %short %short %short
.shstrtab
__snprintf_chk
socket
__sprintf_chk
sscanf
<stack variable!>
(stack variable!)
static U32 TmIo::sCommThreadFunc(TmIo*)
static void TmContext::sThreadNameV(TmContext*, U32, TmFormatCode*, const char*, char**)
stdout
strlen
strtol
sysconf
t3;=H
t.;5L
t6;5H
tC;=@
tc;=0
TCP(RAD)
<telemetry>
(telemetry)buffer size
telemetry/buffer size
(telemetry)context switches(tevent)
telemetry/context switches(tevent)
Telemetry[ERROR]: %short Attempting to reinitialize signed char valid context!  You must call tmShutdownContext first!
Telemetry[ERROR]: %short Invalid parameter(short)
Telemetry[ERROR]: %short Not enough memory, Telemetry requires at least %double bytes
Telemetry[ERROR]: %short Telemetry uninitialized
(telemetry/flipBufferPointers)explicit
(telemetry/flipBufferPointers)space
(telemetry/flipBufferPointers)trickle
<telemetry:io>
telemetry_lockWriteBuffer
Telemetry[LOG]: %short Attempting to connect (timeout = %double ms)
Telemetry[LOG]: %short build: Sep 12 2014 10:36:13
Telemetry[LOG]: %short clearing map signature %double (%short) : %short
Telemetry[LOG]: %short Closing network connections
Telemetry[LOG]: %short cmd: 0x%long long size: 0x%long long
Telemetry[LOG]: %short Connection established
Telemetry[LOG]: %short Creating connection
Telemetry[LOG]: %short Data collection connection closed (reason=%double,remotely=%double)
Telemetry[LOG]: %short done
Telemetry[LOG]: %short Emulated tools version %double
Telemetry[LOG]: %short finding map signatures
Telemetry[LOG]: %short Found corrupt string!
Telemetry[LOG]: %short found %double map signatures
Telemetry[LOG]: %short found map signatures
Telemetry[LOG]: %short Handshake received
Telemetry[LOG]: %short Initializing networking system (TMOF_INIT_NETWORKING)
Telemetry[LOG]: %short Stack var! ref = 0x%p var = 0x%p
Telemetry[LOG]: %short Starting tmio thread
Telemetry[LOG]: %short Telemetry base context size: %double bytes
Telemetry[LOG]: %short tick [void%double]%double @ 0x%llx
Telemetry[LOG]: %short ...tmio thread running
Telemetry[LOG]: %short tmOpen - (%short)%short (%short), %short:%double
Telemetry[LOG]: %short Using tools version 0x%long long
Telemetry[LOG]: %short version: 2.0P(CHECKED)
Telemetry[LOG]: %short Waiting for disconnect
Telemetry[LOG]: %short Waiting for handshake
Telemetry[LOG]: %short Waiting for io connection to close
(telemetry)network bytes
telemetry/network bytes
telemetry/processing_time
(telemetry)processing time(ms)
(telemetry/send)send
(telemetry)tick (ms)
Telemetry[WARNING]: %short Application logical path '%short' is an invalid name
Telemetry[WARNING]: %short Application name '%short' is an invalid name (must be alphanumeric and not contain spaces)
Telemetry[WARNING]: %short Bad handshake, disconnecting
Telemetry[WARNING]: %short Called tmSetLockStateMinTime with corrupt buffer
Telemetry[WARNING]: %short Context size > 4MB...this may impact performance!  1-MB recommended!
Telemetry[WARNING]: %short Could not connect!
Telemetry[WARNING]: %short Could not start system networking subsystem!
Telemetry[WARNING]: %short Dynamic strings not allowed for value string!
Telemetry[WARNING]: %short Failed to create connection
Telemetry[WARNING]: %short Failed to open network connection.
Telemetry[WARNING]: %short Failed to send TM_APP_MAGIC
Telemetry[WARNING]: %short Handshake indicates server side failure with msg '%short'
Telemetry[WARNING]: %short Invalid buffer parameter
Telemetry[WARNING]: %short Invalid connection type '%double'
Telemetry[WARNING]: %short Invalid context
Telemetry[WARNING]: %short Invalid context passed to tmCoreGetPlatformInformation
Telemetry[WARNING]: %short Invalid information type
Telemetry[WARNING]: %short Invalid lock result '%double' passed to tmCoreEndTryLock
Telemetry[WARNING]: %short Invalid lock state '%double'
Telemetry[WARNING]: %short Invalid parameter
Telemetry[WARNING]: %short Invalid parameter '%double', assuming %double
Telemetry[WARNING]: %short Invalid parameter value %double passed to tmSetParameter
Telemetry[WARNING]: %short Invalid pointer passed to tmCoreGetPlatformInformation
Telemetry[WARNING]: %short Invalid socket buffer size parameter
Telemetry[WARNING]: %short Invalid value %double for TMP_LOCK_MIN_TIME
Telemetry[WARNING]: %short Invalid value %double for TMP_TELEMETRY_PREFERRED_CPU
Telemetry[WARNING]: %short mismatched format codes!
Telemetry[WARNING]: %short Missing handshake, disconnecting
Telemetry[WARNING]: %short Mutex name table full
Telemetry[WARNING]: %short Negative zone total
Telemetry[WARNING]: %short NULL format specifier passed
Telemetry[WARNING]: %short NULL key or value passed
Telemetry[WARNING]: %short NULL name specified
Telemetry[WARNING]: %short NULL passed for name or desc
Telemetry[WARNING]: %short NULL passed for name or file
Telemetry[WARNING]: %short NULL string passed
Telemetry[WARNING]: %short Stack variable passed for description!
Telemetry[WARNING]: %short Stack variable passed for name!
Telemetry[WARNING]: %short Stack variable specified for name
Telemetry[WARNING]: %short Stack variable used for format string
Telemetry[WARNING]: %short Stack variable used for location
Telemetry[WARNING]: %short Stack variable used for name
Telemetry[WARNING]: %short Telemetry already shut down
Telemetry[WARNING]: %short Telemetry uninitialized
Telemetry[WARNING]: %short Timed out waiting for handshake
Telemetry[WARNING]: %short tmCheckDebugZoneLevel has been deprecated and is disabled!
Telemetry[WARNING]: %short tmCoreStartup called multiple times
Telemetry[WARNING]: %short tmSetDebugZoneLevel has been deprecated and is disabled!
Telemetry[WARNING]: %short TmStringTable_Put - capacity over 50%%
Telemetry[WARNING]: %short tmUnwindToDebugZoneLevel has been deprecated and is disabled!
Telemetry[WARNING]: %short Unknown option '%double'
Telemetry[WARNING]: %short Unknown protocol version 0x%long long!
Telemetry[WARNING]: %short Unknown server cmd 0x%long long
Telemetry[WARNING]: %short User timer precision is too low!  Microsecond accurate timer is required!
.text
tF;5@
tf;50
tk;=,
tK;=<
TmConnectionStatus itmCoreGetConnectionStatus(HTELEMETRY)
tmdata
TmErrorCode itmCoreGetLastError(HTELEMETRY)
TmErrorCode itmCoreGetPlatformInformation(void*, TmPlatformInformation, void*, U32)
TmErrorCode itmCoreGetSessionName(HTELEMETRY, char*, int)
TmErrorCode itmCoreInitializeContext(TmContext**, void*, U32)
TmErrorCode itmCoreOpen(HTELEMETRY, const char*, const char*, const char*, TmConnectionType, U16, U32, int)
TmErrorCode itmCoreStartup()
TmErrorCode TmIo::openNetworkConnections(TmContext*, int, int)
tmGetAPI
<tmio>
tmTick
<tmZone>
tn;5,
tN;5<
ts;=(
tS;=8
<\tT</tP
tv;5(
tV;58
u,;l$
ul;D$
<unnamed>
<unregistered ELF>
unsigned short{;=$
unsigned short[;=4
unsigned short~;5$
unsigned short^;54
unsigned short>;5D
unsigned short&;5P
unsigned short;;=D
 unsigned short@float=
unsigned short+;=L
unsigned short#;=P
usleep
vfprintf
void itmCoreAlloc(HTELEMETRY, const void*, U64, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreBeginTimeSpan(HTELEMETRY, U64, U32, U64, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreCheckDebugZoneLevel(HTELEMETRY, int)
void itmCoreClearStaticString(HTELEMETRY, const char*)
void itmCoreClose(HTELEMETRY)
void itmCoreEmitAccumulationZone(HTELEMETRY, U64*, U64, U32, U32, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreEnable(HTELEMETRY, TmOption, int)
void itmCoreEndTimeSpan(HTELEMETRY, U64, U32, U64, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreEndTryLock(HTELEMETRY, U64, const char*, int, TmFormatCode*, const void*, TmLockResult)
void itmCoreFlush(HTELEMETRY)
void itmCoreFree(HTELEMETRY, const void*, const char*, int, TmFormatCode*)
void itmCoreLeave(HTELEMETRY, U64, U32, const char*, int)
void itmCoreLockName(HTELEMETRY, const void*, TmFormatCode*, const char*, ...)
void itmCoreMessage(HTELEMETRY, U32, U32, TmFormatCode*, const char*, ...)
void itmCorePause(HTELEMETRY, int)
void itmCoreSetDebugZoneLevel(HTELEMETRY, int)
void itmCoreSetLockState(HTELEMETRY, const void*, TmLockState, const char*, U32, TmFormatCode*, const char*, ...)
void itmCoreSetParameter(HTELEMETRY, TmParameter, const void*)
void itmCoreSetServerConfiguration(HTELEMETRY, TmServerConfiguration, const void*)
void itmCoreSetTimelineSectionName(HTELEMETRY, TmFormatCode*, const char*, ...)
void itmCoreSetVariable(HTELEMETRY, const char*, TmFormatCode*, const char*, ...)
void itmCoreShutdown()
void itmCoreShutdownContext(HTELEMETRY)
void itmCoreSignalLockCount(HTELEMETRY, const char*, U32, const void*, U32, TmFormatCode*, const char*, ...)
void itmCoreThreadName(HTELEMETRY, U32, TmFormatCode*, const char*, ...)
void itmCoreTick(HTELEMETRY)
void itmCoreTryLock(HTELEMETRY, U64*, U64, const char*, U32, const void*, TmFormatCode*, const char*, ...)
void itmCoreUnwindToDebugZoneLevel(HTELEMETRY, int)
void itmCoreUpdateSymbolData(HTELEMETRY)
void sCoreAllocV(TmContext*, const void*, U64, const char*, U32, TmFormatCode*, const char*, char**)
void sCoreDisjointBlobV(HTELEMETRY, int, const void**, const int*, const char*, TmFormatCode*, const char*, char**)
void sCoreEmitAccumulationZoneV(TmContext*, U64*, U64, U32, U32, const char*, U32, TmFormatCode*, const char*, char**)
void sCoreEnterV(HTELEMETRY, U64*, U32, U64, U32, const char*, U32, TmFormatCode*, const char*, char**)
void sCoreLockNameV(TmContext*, U64, TmFormatCode*, const char*, char**)
void sCoreMessageV(TmContext*, U32, U32, TmFormatCode*, const char*, char**)
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, char**) [with T = double, int type = 1, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = char*]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, char**) [with T = float, int type = 0, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = char*]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, char**) [with T = int, int type = 2, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = char*]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, char**) [with T = long long int, int type = 4, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = char*]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, char**) [with T = long long unsigned int, int type = 5, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = char*]
void sCorePlotV(HTELEMETRY, S64, TmPlotType, U32, T, TmFormatCode*, const char*, char**) [with T = unsigned int, int type = 3, HTELEMETRY = TmContext*, S64 = long long int, TmPlotType = TmPlotType, U32 = unsigned int, TmFormatCode = _TmFormatCode, va_list = char*]
void sCoreSetTimelineSectionNameV(TmContext*, TmFormatCode*, const char*, char**)
void sCoreSetVariableV(TmContext*, const char*, TmFormatCode*, const char*, char**)
void sCoreSignalLockCount(TmContext*, const char*, U32, const void*, U32, TmFormatCode*, const char*, char**)
void sCoreTryLockV(TmContext*, U64, U64, const char*, U32, const void*, TmFormatCode*, const char*, char**)
void TmIo::closeNetworkConnections()
__vsprintf_chk
waiting for data
*** WARNING: String table too small, overflow!!! ***
zD/proc/%int/exe
